I had little experience on GIT before. The more deep knowledge becomes more and more critial currently. the following is track how i learn git.

preliminary:
. create a account on githut
. create new repository
. install git client on my local
. learn basic git repository knowledge

basic git knowledge
. workflow
	your local repository consists of 3 trees maintained by git. the first one is 'working directory' which holds the actual files.
	the second one is the 'Index or called Stage' which acts as a staging area and finally the 'Head' which points to the last commit you've made.

. branch
	Branches are used to develop features isolated from each other. the master branch is the 'Default' branch when you create a repository. use other
	branches for development and merge them back to the master branch upon completion.
	
	
start from beginning
how should you start to create your own repository depends on the what you have right now. below are the various use cases
. join an existed project. clone from the existing remote repository
		.git clone https://....
		.modify some files
		.git add filename
		.git commit filename -m "modification"
		.git push -u origin master
		
. start a new project. you are the first person check in staff or you are the administrator of the repository
	.make sure the remote repository has been created
	.create your own local repository
		.create a new project folder
		.cd to the folder
		.git init
		.git add filename
		.git commit filename -m "first check in"
		.git remote add origin remoteURL
		.git push -u origin master
	
	
. branch management
	.create a new branch and switch to it and git HEAD points to the new branch
		git checkout -b devBranch == git branch devBranch + git checkout devBranch 
	.check current branch HEAD points to
		git branch || git branch -v
	.to do some modification
		git add files
		git commit -a -m "check the fix"
		git push origin devBranch
	.merge the change back to master
		git checkout master  #HEAD is point to master branch
		git merge devBranch
	.after branch merged to master, branch can be deleted
		git branch -d devBranch #just delete the branch in your local repository
		git push origin --delete devBranch  #delete branch from your remote repository
		 
		 
	Git merge strategy is different from other version control. it does a simple 3-way merge, using the two snapshots pointed to by the branch tips and the common ancestor of the two.
	Besides git merge, we can merge two branches by rebasing. The approach just applies all the commits in one branch to another branch you like to rebase on. eg.
		.git checkout devBranch
		.git rebase master #modify devBranch by applying the commits to master branch
		
		First, set head devBranch. then apply the commits on devBranch to master. therefore, devBranch has the same base now. we can easily merge both branches.
		
		.git checkout master
		.git merge devBranch
		
		the benefit of rebase over merge is that rebasing makes a cleaner history.
		
	
	branch reference:
	https://www.atlassian.com/git/tutorials/syncing/git-remote
	http://stackoverflow.com/questions/2003505/delete-a-git-branch-both-locally-and-remotely
		
		
		
	
	
